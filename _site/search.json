[
  
    {
      "title"       : "slot attribute 사용",
      "category"    : "",
      "tags"        : "Phoenix, LiveView, slop",
      "url"         : "./phoenix-slot.html",
      "date"        : "2024-01-01 10:32:20 +0900",
      "description" : "slot attribute 사용",
      "content"     : "Phoenix LiveView 에서 동적인 component 를 삽입 하고자 하는 경우, 해당 component attribute 로 slot 을 정의하고 이를 사용해 주어야 한다.사용 방법slot :블록명, required: truedef 컴포넌트명(assigns) do ~H\"\"\" &lt;동적으로 구현할 컴포넌트 태그&gt; &lt;&gt;..사용자 구현...&lt;&gt; &lt;%= render_slot(@블록명) %&gt; &lt;/동적으로 구현할 컴포넌트 태그&gt; \"\"\"end관련 설명 (by ChatGPT) Slot 정의: slot :블록명, required: true는 컴포넌트 내부에 동적으로 콘텐츠를 삽입할 수 있는 블록명이라는 이름의 슬롯을 정의합니다. required: true는 이 슬롯이 반드시 제공되어야 함을 의미합니다. 즉, 이 컴포넌트를 사용할 때는 블록명 슬롯에 대한 내용을 제공해야 합니다. 컴포넌트 정의: def 컴포넌트명(assigns) do … end는 컴포넌트를 정의하는 함수입니다.이 함수 내에서 HTML 태그와 Elixir의 템플릿 언어를 사용하여 컴포넌트의 구조를 정의합니다. 동적 콘텐츠의 삽입 위치: &lt;%= render_slot(@블록명) %&gt; 구문은 정의된 블록명 슬롯에 전달된 콘텐츠를 해당 위치에 렌더링합니다. 이 위치는 내부입니다. 이 태그 안에서 블록명 슬롯에 제공된 콘텐츠가 렌더링됩니다. 사용자 구현: 사용자는 이 컴포넌트를 사용할 때 블록명 슬롯에 원하는 콘텐츠를 제공할 수 있습니다. 이 콘텐츠는 다양한 HTML 요소, 다른 LiveView 컴포넌트, 또는 동적인 데이터를 포함할 수 있습니다. 실제 코드 예시 attr :view_box, :string slot :inner_block, required: true def canvas(assigns) do ~H\"\"\" &lt;svg viewBox={ @view_box }&gt; &lt;defs&gt; &lt;%!-- 위에 정의된 point component 사용하여 정사각형 생성 --%&gt; &lt;rect id=\"point\" width=\"10\" height=\"10\" /&gt; &lt;/defs&gt; &lt;%= render_slot(@inner_block) %&gt; &lt;/svg&gt; \"\"\" end"
    } ,
  
    {
      "title"       : "Elixir - intance 생성",
      "category"    : "",
      "tags"        : "elixir, instance, struct",
      "url"         : "./create-instance.html",
      "date"        : "2023-12-29 13:32:20 +0900",
      "description" : "Elixir - intance 생성",
      "content"     : "Elixir 문범에서 struct 에 대한 instace를 생성하는 방법은 아래와 같이 두가지가 존재한다. (ChatGPT 가 설명한 그 용도의 차이점에 대해서.. 아직 잘 모르겠다. 내눈에는 그냥 동일한 용도로 사용되는 것 처럼 보인다. ;;)__MODULE__ 사용 사용법: %MODULE{} 구문은 주로 모듈 내부에서 해당 모듈의 구조체 인스턴스를 생성할 때 사용됩니다. 이 경우, 모듈 내부에서 직접 %MODULE{field1: value1, field2: value2}와 같이 구조체 인스턴스를 생성할 수 있습니다. 예시: 모듈 내부에서 def new() 함수를 정의하고, 이 함수 안에서 %MODULE{}를 사용하여 인스턴스를 생성할 수 있습니다. def new(field \\\\ []), do: __struct__(field) 정의 사용법: 이 방법은 모듈 외부에서 인스턴스를 생성할 때 사용합니다. 여기서 new 함수는 외부에서 호출할 수 있는 공개 인터페이스를 제공하고, struct 호출을 통해 내부적으로 구조체 인스턴스를 생성합니다. 예시: 다른 모듈에서 ModuleName.new(field_values)를 호출하여 구조체 인스턴스를 생성할 수 있습니다. 여기서 field_values는 인스턴스의 필드를 초기화하기 위해 사용됩니다. 결론두 방식 모두 Elixir에서 구조체 인스턴스를 생성하는 방법입니다. MODULE 방식은 주로 모듈 내부에서 사용되며, def new(field \\ []), do: struct(field) 방식은 모듈 외부에서 구조체 인스턴스를 생성할 때 사용되는 공개 함수를 제공합니다. 두 경우 모두, 모듈명.new(field 값)과 같은 형태로 호출하여 인스턴스를 생성할 수 있습니다."
    } ,
  
    {
      "title"       : "struct - instance 에 대해 (Elixir vs OOP languages)",
      "category"    : "",
      "tags"        : "OOP, instance, struct, Phoenix, LiveView, elixir",
      "url"         : "./instance-with-elixir-copy.html",
      "date"        : "2023-12-29 10:32:20 +0900",
      "description" : "struct - instance 에 대해 (Elixir vs OOP languages)",
      "content"     : "elixir 에서의 구조체는 상속, 다형성 등이 지원되지 않고 한번 정의되면 구조체 내부 field 값을 변경할 수 없는, 내부에 field 가 존재하는 사용자 정의 type 이며, 해당 구조체 type 에 실제 data 를 가지게 하고 이를 변수 매칭 시킨것이 elixir instance 이다.유사점 데이터 캡슐화: Elixir의 구조체와 Java나 Python의 인스턴스 모두 데이터를 캡슐화합니다. 즉, 여러 데이터를 하나의 구조로 묶어 관리할 수 있습니다. 필드 정의: 두 언어에서는 자료구조에 필드(데이터 요소)를 정의할 수 있으며, 이러한 필드는 각각의 자료구조에 속한 정보를 나타냅니다. 타입 안정성: Elixir의 구조체와 Java의 객체는 둘 다 특정 타입에 속하는 데이터를 담는데, 이는 데이터 타입에 대한 안정성과 예측 가능성을 제공합니다. 차이점 불변성(Immutability) vs 가변성(Mutability): Elixir의 구조체는 불변성을 가집니다. 즉, 한 번 생성되면 그 상태를 변경할 수 없습니다. 반면, Java나 Python의 객체는 가변적이며, 객체의 상태(필드 값 등)를 변경할 수 있습니다. 함수형 vs 객체지향: Elixir는 함수형 프로그래밍 패러다임을 따르기 때문에, 데이터와 함수가 분리되어 있습니다. 구조체는 단지 데이터를 담는 용도로 사용되며, 모든 작업은 순수 함수를 통해 처리됩니다. 반면, Java나 Python에서는 객체가 데이터와 그 데이터를 조작하는 메소드를 모두 포함합니다. 상속과 다형성: Java나 Python에서는 클래스 상속과 다형성이 중요한 특징입니다. 객체는 부모 클래스의 속성과 메소드를 상속받을 수 있으며, 인터페이스나 추상 클래스를 통해 다형성을 구현할 수 있습니다. 반면, Elixir의 구조체는 이런 상속 메커니즘이나 다형성을 지원하지 않습니다. 메소드와 함수: Java나 Python에서 객체는 자신의 메소드를 가지고 있으며, 이를 통해 객체의 상태를 변경하거나 정보를 얻을 수 있습니다. Elixir에서는 모든 작업이 함수를 통해 이루어지며, 이 함수들은 구조체의 데이터에 대한 연산을 수행하지만, 구조체 내부에 정의되지 않습니다. Elixir의 구조체는 Java나 Python의 객체와 유사하게 데이터를 캡슐화하는 역할을 하지만, 불변성, 함수형 패러다임, 상속 및 다형성 부재, 메소드와 함수의 차이라는 측면에서 분명한 차이점이 있습니다. 이러한 차이점들은 Elixir가 가진 함수형 프로그래밍의 특징을 반영합니다."
    } ,
  
    {
      "title"       : "Phoenix Presence (by ChatGPT)",
      "category"    : "",
      "tags"        : "Phoenix Presence, Phoenix, LiveView",
      "url"         : "./phoenix-presence.html",
      "date"        : "2023-12-26 10:32:20 +0900",
      "description" : "Phoenix Presence (by ChatGPT)",
      "content"     : "Phoenix Presence는 Elixir 언어를 사용하는 Phoenix 프레임워크의 한 부분으로, 실시간으로 사용자의 연결 상태를 추적하고 관리하는 기능을 제공합니다. 이 기능은 주로 채팅 애플리케이션, 게임, 라이브 이벤트 등에서 유용하게 사용됩니다.Phoenix Presence의 핵심은 분산 시스템에서도 사용자의 현재 상태를 효과적으로 관리할 수 있다는 점입니다. 이를 위해, Phoenix는 CRDT(Conflict-Free Replicated Data Type)라는 데이터 타입을 사용하여 네트워크의 다양한 노드 간에 사용자 상태 정보를 동기화합니다. 이를 통해 서버 간의 일관성을 유지하면서도, 네트워크 분할이나 다른 이슈들이 발생해도 사용자의 상태를 정확하게 추적할 수 있습니다.Phoenix Presence를 사용하면 어떤 사용자가 온라인인지, 어느 채널에 있는지 등의 정보를 실시간으로 확인할 수 있습니다. 또한, 이 기능은 Elixir의 가벼운 프로세스와 메시지 전달 시스템을 활용하여 높은 성능을 제공합니다. 따라서 많은 수의 사용자가 동시에 접속하는 환경에서도 안정적으로 작동합니다.Phoenix Presence를 활용하면 다음과 같은 기능을 구현할 수 있습니다:사용자가 어떤 채널에 접속했는지 실시간으로 보여주기.사용자의 상태 변화(예: 온라인, 오프라인, 바쁨 등)를 추적하여 다른 사용자에게 알려주기.게임이나 다른 실시간 애플리케이션에서 사용자간의 상호 작용을 촉진하기.이 기능을 활용하려면, Phoenix 프레임워크에 대한 이해뿐만 아니라, Elixir의 동시성과 분산 시스템에 대한 지식도 필요합니다. 이미 Elixir를 공부하고 계신다면, Phoenix Presence는 백엔드 엔지니어로서의 여러분의 역량을 한층 더 향상시킬 수 있는 좋은 도구가 될 것입니다.CRDT(Conflict-Free Replicated Data Type) (by ChatGPT)CRDT(Conflict-Free Replicated Data Type)는 분산 시스템에서 데이터의 일관성을 유지하는 데 사용되는 데이터 타입입니다. 이 기술의 주요 목표는 네트워크의 다른 노드에서 동일한 데이터를 독립적으로 업데이트하고, 나중에 이러한 변경 사항들을 합쳐도 데이터의 일관성을 보장하는 것입니다.CRDT의 특징:Conflict-Free: CRDT는 다수의 노드에서 동시에 발생하는 업데이트 사이의 충돌을 자동으로 해결합니다. 이는 각 노드가 네트워크의 다른 부분과 일시적으로 연결이 끊겨도 안정적으로 작동할 수 있게 해줍니다.Replicated: 데이터는 네트워크 내의 여러 노드에 복제됩니다. 이는 각 노드가 로컬 데이터에 대해 독립적으로 작업할 수 있게 하며, 네트워크 연결이 복구되면 변경 사항을 다시 합칩니다.Data Types: CRDT는 다양한 데이터 타입을 지원합니다, 예를 들어 세트(set), 카운터(counter), 맵(map) 등이 있으며, 이러한 데이터 타입들은 분산 시스템에서 자동으로 동기화됩니다.실시간 트래픽 관리에 대한 CRDT의 기여:고가용성 및 내결함성: CRDT는 네트워크 장애나 일부 노드의 실패에도 불구하고 데이터의 가용성과 일관성을 유지합니다. 이는 실시간 트래픽이 많은 애플리케이션에서 중요합니다.실시간 데이터 동기화: 실시간 애플리케이션에서 사용자 상태나 메시지와 같은 정보는 여러 노드에 걸쳐 신속하게 동기화되어야 합니다. CRDT는 이러한 실시간 동기화를 자연스럽게 지원합니다.탄력적인 트래픽 관리: 분산 시스템에서 트래픽 부하가 한 노드에서 다른 노드로 이동할 수 있습니다. CRDT를 사용하면, 이러한 부하 이동이 데이터 일관성에 영향을 미치지 않습니다.확장성: CRDT는 시스템이 확장됨에 따라 새로운 노드를 쉽게 추가할 수 있게 해주며, 데이터의 일관성을 유지하면서도 시스템의 확장성을 지원합니다.CRDT는 Phoenix Presence와 같은 실시간 애플리케이션에서 사용자의 상태를 관리하는 데 매우 유용합니다. 사용자가 여러 노드에 걸쳐 있거나, 네트워크 상태가 변동적일 때도, 사용자의 상태(예: 온라인, 오프라인)는 모든 노드에 걸쳐 일관성 있게 유지됩니다.CRDT 학습 자료 CRDT Resources - crdt.tech. (https://crdt.tech/)"
    } ,
  
    {
      "title"       : "복합 쿼리를 데이터베이스에 실행할 때 발생하는 과정",
      "category"    : "",
      "tags"        : "complex query, database, Phoenix, LiveView",
      "url"         : "./complex-query.html",
      "date"        : "2023-12-24 13:32:20 +0900",
      "description" : "복합 쿼리의 logic 실행은 client 측에서 진행되는가, 아니면 database server 측에서 진행되는가?",
      "content"     : "복합 쿼리의 logic 실행은 client 측에서 진행되는가, 아니면 database server 측에서 진행되는가?복합 쿼리를 데이터베이스에 실행할 때 발생하는 과정은 다음과 같습니다: 쿼리의 구성: 클라이언트 측(여기서는 Elixir/Ecto를 사용하는 서버)에서 Ecto 쿼리를 작성하고, 이는 SQL 쿼리로 변환됩니다. 이 변환 과정은 Ecto가 처리하며, 작성된 Ecto 쿼리를 데이터베이스가 이해할 수 있는 SQL 쿼리로 변환합니다. SQL 쿼리의 전송: 변환된 SQL 쿼리는 데이터베이스 서버로 전송됩니다. 이 때, 클라이언트 측에서는 복잡한 로직을 처리하지 않고, 데이터베이스에 대한 쿼리 요청만 전송합니다. 데이터베이스의 처리: 데이터베이스 서버에서는 받은 SQL 쿼리를 실행합니다. 데이터베이스 관리 시스템(DBMS)은 쿼리를 분석하고 최적화하여 적절한 방식으로 데이터를 검색합니다. 결과의 반환: 데이터베이스는 쿼리 결과를 클라이언트 측으로 다시 보냅니다. 이 결과는 요청된 조건과 매칭되는 데이터를 포함합니다. 복합 쿼리의 처리 클라이언트 측 로직: 클라이언트는 쿼리를 구성하고 최적화하는 로직을 처리하지 않습니다. 클라이언트의 역할은 적절한 쿼리를 작성하고 요청하는 것입니다. 데이터베이스 측 최적화: 실제 쿼리의 실행과 최적화는 데이터베이스 서버에서 처리됩니다. 데이터베이스는 쿼리 플랜을 생성하고 실행하여, 요청된 작업을 최적화된 방식으로 처리합니다.요약따라서, 복합 쿼리의 로직 처리와 최적화는 주로 데이터베이스 서버에서 이루어지며, 클라이언트 측에서는 쿼리를 작성하고 요청하는 역할을 합니다. 이 과정은 데이터베이스 시스템의 성능과 효율성을 보장하기 위해 필요합니다.대용량 서비스에 구현에서의 Database 병목 발생과 복합 쿼리의 관계대용량 데이터베이스 서버 환경에서는 데이터베이스 서버의 처리 능력에 한계가 있으며, 이는 종종 시스템의 병목 지점이 될 수 있습니다. 복잡한 쿼리 로직의 처리가 데이터베이스 서버에서 이루어지는 것은 사실이지만, 이는 서비스 운영 측면에서 효율성에 영향을 미칠 수 있습니다. 이에 대해 몇 가지 중요한 점을 고려해볼 필요가 있습니다:데이터베이스 서버의 병목 현상 대용량 처리: 대규모 데이터와 복잡한 쿼리는 데이터베이스 서버에 상당한 부하를 주고, 성능 저하의 원인이 될 수 있습니다. 자원 관리: 데이터베이스 서버는 한정된 자원(메모리, CPU)을 사용하기 때문에, 효율적인 쿼리 최적화와 자원 관리가 필수적입니다.클라이언트 측 최적화 쿼리 최적화: 클라이언트 측에서 쿼리를 가능한 한 효율적으로 작성하는 것이 중요합니다. 불필요한 데이터 로드를 피하고, 필요한 데이터만 정확히 요청하는 것이 중요합니다. 로드 분산: 데이터베이스에 가해지는 부하를 줄이기 위해 캐싱, 읽기 전용 복제본 사용, 데이터 분할 등의 전략을 사용할 수 있습니다.서비스 운영 측면에서의 고려사항 스케일링: 데이터베이스 서버의 성능을 향상시키기 위해 하드웨어 스케일업(더 강력한 서버 사용), 스케일아웃(여러 서버로 작업 분산)을 고려할 수 있습니다. 쿼리 성능 분석: 정기적인 쿼리 성능 분석과 최적화를 통해 데이터베이스 서버의 부하를 관리합니다.비즈니스 로직과 데이터베이스 로직의 분리: 가능하면 복잡한 비즈니스 로직을 애플리케이션 레벨에서 처리하고, 데이터베이스는 데이터 저장과 간단한 조회에 집중하게 하는 것이 바람직할 수 있습니다.결론데이터베이스 서버에서의 복잡한 쿼리 처리는 효율성을 저해할 수 있으며, 이를 관리하기 위해서는 쿼리 최적화, 적절한 인프라 선택, 그리고 애플리케이션 설계의 최적화가 필요합니다. 이러한 전략들은 서비스의 규모와 요구사항에 따라 달라질 수 있습니다."
    } ,
  
    {
      "title"       : "LiveView preload/1 에 대해",
      "category"    : "",
      "tags"        : "preload/1, Phoenix, LiveView",
      "url"         : "./preload.html",
      "date"        : "2023-12-20 13:32:20 +0900",
      "description" : "LiveView - preload/1",
      "content"     : "Consider the preload/1 Callback (by ChatGPT)live_component/1이 처음 호출될 때, LiveView는 일반적으로 mount/1, update/2, 그리고 render/1 콜백을 순서대로 호출합니다. 하지만 이 콜백들만으로는 충분하지 않은 상황이 발생할 수 있습니다. 특히, 성능 문제, 예를 들어 N + 1 문제를 방지하기 위해 preload/1이라는 추가 콜백이 필요할 수 있습니다.N + 1 문제란? 이는 데이터베이스 쿼리와 관련된 성능 문제로, 한 번의 큰 쿼리 대신 작은 쿼리가 여러 번 발생하여 전체적인 성능이 저하되는 현상을 말합니다.preload/1 콜백은 mount/1이나 render/1 전에 호출됩니다. 이렇게 함으로써 필요한 데이터를 사전에 로드하고, 성능 저하를 방지할 수 있습니다.마운트/렌더 워크플로우의 경우, LiveView는 preload/1을 호출한 다음, mount/1, update/2, 그리고 마지막으로 render/1을 호출합니다.변경 관리 워크플로우에서는 mount/1은 생략되지만, preload/1, update/2, 그리고 render/1의 순서는 유지됩니다.preload/1 콜백의 작동 방식과 N + 1 문제와의 관계Phoenix LiveView에서 preload/1 콜백은 컴포넌트의 라이프사이클에서 중요한 역할을 합니다. 이 콜백은 컴포넌트가 마운트되기 전에 필요한 데이터를 미리 로드하는데 사용됩니다. 예를 들어, 여러 컴포넌트에 필요한 데이터를 한 번의 배치로 미리 로드하여, 각각의 컴포넌트가 마운트될 때 필요한 데이터를 제공할 수 있습니다. 이 과정은 preload(list_of_assigns) -&gt; mount(socket) -&gt; update(assigns, socket) -&gt; render(assigns)의 순서로 진행됩니다​​.preload/1 콜백의 주요 목적은 N + 1 문제를 해결하는 것입니다. 이 문제는 여러 데이터 레코드에 대한 의존성 있는 쿼리를 반복적으로 실행하여 발생하는 성능 저하 문제를 말합니다. preload/1를 사용함으로써 필요한 모든 데이터를 한 번에 로드할 수 있으며, 이는 데이터베이스에 대한 불필요한 접근을 줄이고 전체적인 성능을 향상시킵니다.Phoenix LiveView 문서에서는 preload/1과 관련된 구체적인 콜백 목록이나 사용 방법에 대해 자세히 설명하지 않지만, preload/1 콜백의 사용이 컴포넌트 라이프사이클에서 중요한 역할을 하고, 성능 최적화에 기여한다는 점은 분명합니다​​.이 정보를 바탕으로, preload/1 콜백이 데이터 처리를 mount/1 또는 update/2와 분리하여 실행함으로써 성능 최적화에 기여한다는 것을 이해할 수 있습니다. mount/1 이전에는 초기 로딩에 필요한 모든 데이터를 로드하고, update/2 이전에는 변경된 데이터에 대해서만 로드하는 방식으로 성능을 최적화합니다."
    } ,
  
    {
      "title"       : "기본적인 LiveView Authentication 적용",
      "category"    : "",
      "tags"        : "Authentication, Phoenix, LiveView",
      "url"         : "./authentication.html",
      "date"        : "2023-12-18 13:32:20 +0900",
      "description" : "LiveView 라이브러리가 제공하는 Authentication 을 적용",
      "content"     : "Authentication Generator 사용을 위한 phx.gen 추가 &gt; mix phx.gen 이 중 auth 관련 generator 사용 &gt; mix phx.gen.auth Accounts User uers Context (‘Accounts’) Context는 Phoenix에서 도메인 특정 로직을 캡슐화하는 모듈. 이는 데이터베이스와의 상호작용을 관리하고, 애플리케이션의 나머지 부분에 서비스 API를 제공한다. “Accounts”는 이 예제에서 생성될 context의 이름으로 이 context는 인증과 관련된 모든 함수와 로직을 포함하게 된다. Schema (‘User’) Schema는 데이터베이스 테이블의 구조를 설명하는 Elixir 모듈. 이는 테이블의 각 열에 해당하는 필드와 그 타입을 정의한다. “User”는 사용자 데이터를 나타내는 schema의 이름으로 이 schema는 사용자 데이터를 저장하고 쿼리하는 데 사용된다. Plural name of the schema (‘users’) 이것은 데이터베이스 내에서 사용될 테이블의 이름. Phoenix는 일반적으로 schema 이름의 복수형을 테이블 이름으로 사용한다. “users”는 “User” schema에 대응하는 데이터베이스 테이블의 이름. &gt; mix deps.get Run Migration&gt; mix ecto.migrate해당 설정 이후 기존 live \"/guess\", WrongLive 를 :require_authenticated_user plug 를 실행하는 scope 로 옮겨서 추가해준다.따라서 해당 경로 접속은 Authentication 이 필요하며, 해당 인증은 LiveView 에서 재공하는 login / signup page 를 사용하여 회원 등록을 손쉽게 적용할 수 있게 된다."
    } ,
  
    {
      "title"       : "Starting the adventure",
      "category"    : "",
      "tags"        : "general blogging, thoughts, life",
      "url"         : "./starting-the-adventure.html",
      "date"        : "2021-03-24 00:00:00 +0900",
      "description" : "Midlife career change: a disaster or an opportunity?",
      "content"     : "In the midst of a global pandemic caused by the SARS-COV2 coronavirus; I decided to start blogging. I wanted to blog since a long time, I have always enjoyed writing, but many unknowns and having “no time” for it prevented me from taking it up. Things like: “I don’t really know who my target audience is”, “what would my topic or topics be?”, “I don’t think I am a world-class expert in anything”, and many more kept stopping me from setting up my own blog. Now seemed like a good time as any so with those and tons of other questions in my mind I decided it was time to start.Funnily, this is not my first post. The birth of the blog came very natural as a way to “document” my newly established pursuit for getting myself into Machine Learning. This new adventure of mine comprises several things, and if I want to succeed I need to be serious about them all: I want to start coding again! I used to code a long time ago, starting when I was 8 years old in a Tandy Color Computer hooked up to my parent’s TV. Machine Learning is a vast, wide subject, I want to learn the generals, but also to select a few areas to focus on. Setting up a blog to document my journey and share it: Establish a learning and blogging routine. If I don’t do this, I am sure this endeavour will die off soon.As for the focus areas I will start with: Neural Networks fundamentals: history, basic architecture and math behind them Deep Neural Networks Reinforcement Learning Current state of the art: what is at the cutting edge now in terms of Deep Neural Networks and Reinforcement Learning?I selected the above areas to focus on based on my personal interests, I have been fascinated by the developments in reinforcement learning for a long time, in particular Deep Mind’s awesome Go, Chess and Starcraft playing agents. Therefore, I started reading a lot about it and even started a personal project for coding a tic-tac-toe learning agent.With my limited knowledge I have drafted the following learning path: Youtube: Three Blue One Brown’s videos on Neural Networks, Calculus and Linear Algebra. I cannot recommend them enough, they are of sufficient depth and use animation superbly to facilitate the understanding of the subjects. Coursera: Andrew Ng’s Machine Learning course Book: Deep Learning with Python by Francois Chollet Book: Reinforcement Learning: An Introduction, by Richard S. Sutton and Andrew G. BartoAs for practical work I decided to start by coding my first models from scratch (without using libraries such as Tensorflow), to be able to deeply understand the math and logic behind the models, so far it has proven to be priceless.For my next project I think I will start to do the basic hand-written digits recognition, which is the Machine Learning Hello World, for this I think I will start to use Tensorflow already.I will continue to write about my learning road, what I find interesting and relevant, and to document all my practical exercises, as well as news and the state of the art in the world of AI.So far, all I have learned has been so engaging that I am seriously thinking of a career change. I have 17 years of international experience in multinational corporations across various functions, such as Information Services, Sales, Customer Care and New Products Introduction, and sincerely, I am finding more joy in artificial intelligence than anything else I have worked on before. Let’s see where the winds take us.Thanks for reading!P.S. For the geeks like me, here is a snippet on the technical side of the blog.Static Website GeneratorI researched a lot on this, when I started I didn’t even know I needed a static website generator. I was just sure of one thing, I wanted my blog site to look modern, be easy to update and not to have anything extra or additional content or functionality I did not need.There is a myriad of website generators nowadays, after a lengthy search the ones I ended up considering are: wordpress wix squarespace ghost webflow netlify hugo gatsby jekyllI started with the web interfaced generators with included hosting in their offerings:wordpress is the old standard, it is the one CMS I knew from before, and I thought I needed a fully fledged CMS, so I blindly ran towards it. Turns out, it has grown a lot since I remembered, it is now a fully fledged platform for complex websites and ecommerce development, even so I decided to give it a try, I picked a template and created a site. Even with the most simplistic and basic template I could find, there is a lot going on in the site. Setting it up was not as difficult or cumbersome as others claim, it took me about one hour to have it up and running, it looks good, but a bit crowded for my personal taste, and I found out it serves ads in your site for the readers, that is a big no for me.I have tried wix and squarespace before, they are fantastic for quick and easy website generation, but their free offering has ads, so again, a big no for me.I discovered ghost as the platform used by one of the bloggers I follow (Sebastian Ruder), turns out is a fantastic evolution over wordpress. It runs on the latest technologies, its interface is quite modern, and it is focused on one thing only: publishing. They have a paid hosting service, but the software is open sourced, therefore free to use in any hosting.I also tested webflow and even created a mockup there, the learning curve was quite smooth, and its CMS seems quite robust, but a bit too much for the functionalities I required.Next were the generators that don’t have a web interface, but can be easily set up:The first I tried was netlify, I also set up a test site in it. Netlify provides free hosting, and to keep your source files it uses GitHub (a repository keeps the source files where it publishes from). It has its own CMS, Netlify CMS, and you have a choice of site generators: Hugo, Gatsby, MiddleMan, Preact CLI, Next.js, Elevently and Nuxt.js, and once you choose there are some templates for each. I did not find the variety of templates enticing enough, and the set up process was much more cumbersome than with wordpress (at least for my knowledge level). I choose Hugo for my test site.I also tested gatsby with it’s own Gatsby Cloud hosting service, here is my test site. They also use GitHub as a base to host the source files to build the website, so you create a repository, and it is connected to it. I found the free template offerings quite limited for what I was looking for.Finally it came the turn for jekyll, although an older, and slower generator (compared to Hugo and Gatsby), it was created by one of the founders of GitHub, so it’s integration with GitHub Pages is quite natural and painless, so much so, that to use them together you don’t even have to install Jekyll in your machine! You have two choices: keep it all online, by having one repository in Github keep all the source files, modify or add them online, and having Jekyll build and publish your site to the special gh-pages repository everytime you change or add a new file to the source repository. Have a synchronized local copy of the source files for the website, this way you can edit your blog and customize it in your choice of IDE (Integrated Development Environment). Then, when you update any file on your computer, you just “push” the changes to GitHub, and GitHub Pages automatically uses Jekyll to build and publish your site.I chose the second option, specially because I can manipulate files, like images, in my laptop, and everytime I sync my local repository with GitHub, they are updated and published automatically. Quite convenient.After testing with several templates to get the feel for it, I decided to keep Jekyll for my blog for several reasons: the convenience of not having to install anything extra on my computer to build my blog, the integration with GitHub Pages, the ease of use, the future proofing via integration with modern technologies such as react or vue and the vast online community that has produced tons of templates and useful information for issue resolution, customization and added functionality.I picked up a template, just forked the repository and started modifying the files to customize it, it was fast and easy, I even took it upon myself to add some functionality to the template (it served as a coding little project) like: SEO meta tags Dark mode (configurable in _config.yml file) automatic sitemap.xml automatic archive page with infinite scrolling capability new page of posts filtered by a single tag (without needing autopages from paginator V2), also with infinite scrolling click to tweet functionality (just add a &lt;tweet&gt; &lt;/tweet&gt; tag in your markdown. custom and responsive 404 page responsive and automatic Table of Contents (optional per post) read time per post automatically calculated responsive post tags and social share icons (sticky or inline) included linkedin, reddit and bandcamp icons copy link to clipboard sharing option (and icon) view on github link button (optional per post) MathJax support (optional per post) tag cloud in the home page ‘back to top’ button comments ‘courtain’ to mask the disqus interface until the user clicks on it (configurable in _config.yml) CSS variables to make it easy to customize all colors and fonts added several pygments themes for code syntax highlight configurable from the _config.yml file. See the highlighter directory for reference on the options. responsive footer menu and footer logo (if setup in the config file) smoother menu animationsAs a summary, Hugo and Gatsby might be much faster than Jekyll to build the sites, but their complexity I think makes them useful for a big site with plenty of posts. For a small site like mine, Jekyll provides sufficient functionality and power without the hassle.You can use the modified template yourself by forking my repository. Let me know in the comments or feel free to contact me if you are interested in a detailed walkthrough on how to set it all up.HostingSince I decided on Jekyll to generate my site, the choice for hosting was quite obvious, Github Pages is very nicely integrated with it, it is free, and it has no ads! Plus the domain name isn’t too terrible (the-mvm.github.io).Interplanetary File SystemTo contribute to and test IPFS I also set up a mirror in IPFS by using fleek.co. I must confess that it was more troublesome than I imagined, it was definetively not plug and play because of the paths used to fetch resources. The nature of IPFS makes short absolute paths for website resources (like images, css and javascript files) inoperative; the easiest fix for this is to use relative paths, however the same relative path that works for the root directory (i.e. /index.html) does not work for links inside directories (i.e. /tags/), and since the site is static, while generating it, one must make the distinction between the different directory levels for the page to be rendered correctly.At first I tried a simple (but brute force solution):# determine the level of the current file{% assign lvl = page.url | append:'X' | split:'/' | size %}# create the relative base (i.e. \"../\"){% capture relativebase %}{% for i in (3..lvl) %}../{% endfor %}{% endcapture %}{% if relativebase == '' %} {% assign relativebase = './' %}{% endif %}...# Eliminate unecesary double backslashes{% capture post_url %}{{ relativebase }}{{ post.url }}{% endcapture %}{% assign post_url = post_url | replace: \"//\", \"/\" %}This jekyll/liquid code was executed in every page (or include) that needed to reference a resource hosted in the same server.But this fix did not work for the search function, because it relies on a search.json file (also generated programmatically to be served as a static file), therefore when generating this file one either use the relative path for the root directory or for a nested directory, thus the search results will only link correctly the corresponding pages if the page where the user searched for something is in the corresponding scope.So the final solution was to make the whole site flat, meaning to live in a single directory. All pages and posts will live under the root directory, and by doing so, I can control how to address the relative paths for resources."
    } 
  
]
